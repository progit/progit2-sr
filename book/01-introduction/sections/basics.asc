=== Основе програма Гит

Па, шта је Гит у основи?
Веома је важно схватити овај одељак, јер ако разумете шта је Гит и основе његовог функционисања, онда ће вам бити много једноставније да ефикасно користите Гит.
Док учите Гит, пробајте да заборавите на ствари које знате о многим другим VCS системима као што су _Subversion_ и _Perforce_; на тај начин ћете избећи неке суптилне недоумице док користите овај алат.
Гит чува и посматра податке на много другачији начин од осталих система, иако је кориснички интерфејс веома сличан, и разумевање тих разлика ће помоћи да не дође до забуне током његовог коришћења.(((Subversion)))(((Perforce)))

==== Снимци, не разлике

Главна разлика између програма Гит и других VCS система (укључујући _Subversion_ и екипу) је начин на који Гит посматра податке.
Концептуално, већина других система чува податке као листу промена фајлова.
Ови системи (_CVS_, _Subversion_, _Perforce_, _Bazaar_, и тако даље) посматрају податке које чувају као скуп фајлова и промена које су направљене над њима током времена.

.Чување података као промене у односу на основну верзију сваког фајла.
image::images/deltas.png[Чување података као промене у односу на основну верзију сваког фајла]

Програм Гит не посматра податке на овај начин, нити их тако памти.
Уместо тога, Гит посматра податке као да су скуп снимака (_snapshots_) минијатурног фајл система.
Сваки пут када извршите комит (_commit_), или сачувате стање свог пројекта на Гиту, он у суштини узима слику стања ваших фајлова у том тренутку и памти референцу на тај снимак.
Да би одржао ефикасност, ако се фајл није променио, Гит не чува фајл поново, већ само везу ка претходном идентичном фајлу који је већ раније сачувао.
Гит податке посматра као *ток снимака*.

.Чување података као снимака пројекта током времена.
image::images/snapshots.png[Чување података као снимака пројекта током времена]

Ово је важна разлика између програма Гит и скоро свих других VCS система.
Због овога Гит скоро сваки аспект контроле верзије који су већина осталих система само копирали из претходне генерације посматра на другачији начин.
То чини Гит минијатурним фајл системом са уграђеним изузетно моћним алатима, а не само обичним VCS системом.
Истражићемо неке предности које добијате чистим посматрањем података на овај начин док будемо говорили о гранању у програму Гит у <<_git_branching>>.

==== Скоро свака операција је локална

Већини операција у програму Гит су потребни само локалне фајлове и ресурси да би се извршиле - у општем случају, није потребна никаква информација са другог рачунара на мрежи.
Ако сте навикнути на CVCS системе где већина операција има застој због латенције мреже, овај аспект Гита ће вас уверити у то да су богови брзине благосиљали Гит ванземаљским моћима.
Пошто имате читаву историју пројекта одмах ту на локалном диску, већина операција ће се извршити скоро тренутно.

На пример, да бисте прегледали историју пројекта, Гит не мора да оде на сервер да је преузме да би вам је приказао -- само треба да је прочита директно из локалне базе података.
Ово значи да ћете видети историју пројекта истог тренутка.
Ако желите да видите измене које су унете у фајл између тренутне верзије и оне од пре месец дана, Гит може да погледа како је фајл изгледао пре месец дана и да уради локално израчунавање разлике, уместо да пита удаљени сервер да уради то или да повуче старију верзију фајла са удаљеног сервера и да израчуна разлику локално.

Ово такође значи да нема много ствари које не можете да урадите док нисте прикачени на мрежу или на VPN.
Ако се укрцате на авион или воз и желите да урадите нешто, можете да комитујете без проблема све док не дођете до мрежне конекције да гурнете податке на сервер.
Ако одете кући и не можете да подесите VPN клијент да ради како треба, и даље можете да радите на пројекту.
Код многих других система, овакве ствари су немогуће или захтевају превише муке.
На пример, у програму _Perforce_ не можете да урадите много тога ако нисте повезани са сервером; а у програмима _Subversion_ и _CVS_ и даље можете да мењате фајлове, али не можете да комитујете промене ка бази података (јер она није на мрежи).
Ово можда не изгледа као велика ствар, али изненадили бисте се када видите колико овакве ствари значе.

==== Гит има интегритет

У програму Гит се за све рачуна контролна сума (_checksum_) пре него што се сачува, а онда се стварима приступа користећи ту контролну суму.
То значи да је немогуће променити садржај било ког фајла или директоријума а да Гит не зна за то.
Ова функционалност је уграђена у Гит у најнижим слојевима и својстена је његовој филозофији. Не можете да изгубите податке током транзита, или да дође до оштећења фајлова а да Гит то не примети.

Механизам који Гит користи за контролну суму зове се SHA-1 хеш (_SHA-1 hash_).
То је стринг од 40 карактера који се састоји од хексадецималних цифара (0-9 и a-f) и рачуна се на основу садржаја фајла или структуре директоријума у програму Гит.
SHA-1 хеш изгледа отприлике овако:

[source]
----
24b9da6552252987aa493b52f8696cd6d3b00373
----

Ове хеш вредности ћете сретати посвуда у програму Гит јер их он доста користи.
Заправо, све што Гит чува у базу података чува се на основу хеш вредности садржаја, а не на основу имена фајла.

==== Гит углавном само додаје податке

Када обавите неку акцију у програму Гит, скоро све оне само додају податке у Гит базу података.
Тешко је натерати систем да уради нешто што не може да се опозове или да обрише податке на било који начин.
Као и код било ког другог VCS система, можете да направите грешку код промена које још нису комитоване; али након што комитујете снимак у Гит, веома је тешко изгубити га, поготово ако редовно шаљете базу података другом репозиторијуму.

Због овога је коришћење програма Гит право уживање, јер знамо да можемо да експериментишемо без бриге да ћемо нешто упропастити.
За мало детаљнији поглед на то како Гит чува податке и како вратити податке које сте наизглед изгубили, погледајте <<_undoing>>.

==== Три стања

Сада обратите пажњу.
Ово је главна ствар коју треба запамтити о програму Гит, ако желите да остатак учења тече како ваља.
Гит има три главна стања у којима се могу наћи ваши фајлови: комитовано, модификовано и стејџовано.
Комитовано значи да су подаци смештени у локалну бази података на сигурном.
Модификовано значи да сте променили фајл али да га још увек нисте комитовали у базу података.
Стејџовано значи да сте означили модификовани фајл да се у свом тренутном стању укључи у следећи комит снимка који будете направили.

Ово нас води до три главне секције Гит пројекта: Гит директоријум, радни директоријум и стејџ.

.Радни директоријум, стејџ и Гит директоријум.
image::images/areas.png[„Радни директоријум, стејџ и Гит директоријум.”]

Гит директоријум је место где програм Гит чува све метаподатке и објектну базу података за ваш пројекат. Ово је најважнији део програма Гит и то је оно што се копира када клонирате репозиторијум са другог рачунара.

Радни директоријум је један чекаут (_checkout_) једне верзије пројекта.
Ови фајлови се довлаче из компресоване базе података из Гит директоријума и смештају се на диск да бисте их користили и модификовали.

Стејџ је фајл који се обично налази у Гит директоријуму и чува информације о томе шта ће се укључити у следећи комит.
Понекад се назива „индекс”, али се често користи и назив стејџ.

Основни ток рада са програмом Гит иде отприлике овако:

1. Модификујете фајлове у радном директоријуму.
2. Стејџујете фајлове, односно додајете њихове снимке на стејџ.
3. Комитујете, што значи да узмете фајлове у оној верзији у којој су били када сте их додали на стејџ и те снимке трајно смештате у Гит директоријум.

Ако се нека верзија фајла налази у Гит директоријуму, сматра се комитованом.
Ако је модификована и онда додата на стејџ, она је стејџована.
А ако се променила од чекаута али није стејџована, онда је модификована.
У <<_git_basics_chapter>>, научићете више о овим стањима и о томе како се најбоље користе, као и начин да потпуно прескочите стејџ.
