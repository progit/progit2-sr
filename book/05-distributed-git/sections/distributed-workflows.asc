=== Дистрибуирани процеси рада

(((процеси рада)))
За разлику од централизованих система за контролу верзије (CVCS), дистрибутивна природа програма Гит вам омогућава да будете много флексибилнији по питању начина на који програмери сарађују на пројектима.
Код централизованих система, сваки програмер је чвор који ради мање више исто као и централни хаб.
Међутим, у програму Гит сваки програмер је потенцијално и чвор и хаб -- односно, сваки програмер може и да даје допринос коду у другим репозиторијумима и да одржава јавни репозиторијум према коме други могу да базирају свој рад и коме могу да дају допринос.
Ово отвара огроман спектар могућности за процес рада вашег пројекта и/или вашег тима, тако да ћемо прећи неколико честих парадигми које користе предност ове прилагодљивости.
Представићемо предности и могуће мане сваког дизајна; можете да изаберете само један од њих који ћете користити, или можете да помешате могућности сваког од њих.

==== Централизован процес рада

(((процеси рада, централизован)))
У централизованим системима, у општем случају постоји јединствен модел сарадње -- централизовани процес рада.
Један централни хаб, или _репозиторијум,_ може да прихвати кôд, а сви синхронизују свој рад са њим.
Већи број програмера су чворови -- потрошачи тог хаба -- и синхронизују се са том централизованим местом.

.Централизовани процес рада
image::images/centralized_workflow.png[Централизовани процес рада]

Ово значи да ако два програмера клонирају са хаба и обојица направе промене, први програмер који гурне своје промене назад на хаб може то да уради без проблема.
Други програмер мора да споји рад првог у свој пре него што гурне узводно своје промене, како не би преписао промене које је направио први програмер.
Овај концепт је важи у програму Гит исто као и у _Subversion_(((Subversion))) (или у било ком другом CVCS), а овај модел ради савршено добро у програму Гит.

Ако сте се већ навикли на централизовани процес рада у својој компанији или тиму, лако можете наставити да користите тај процес рада са програмом Гит.
Једноставно подесите један репозиторијум, дајте свим члановима тима дозволу за гурање на њега; програм Гит неће дозволити да корисници пишу преко туђих промена.

Рецимо да Марко и Милица почињу да раде истовремено.
Марко завршава своју промену и гура је на сервер.
Онда Милица покушава да гурне своје промене, али сервер их одбија.
Сервер јој каже да покушава да гурне промене које не могу да се премотају унапред и да то неће моћи да уради све док не преузме податке и не споји их са својим.
Овај процес рада је привлачан многим људима јер је то парадигма која им је позната и која им одговара.

Ово није ограничено само на мале тимове.
Са Гитовим моделом гранања је могуће да на стотине програмера успешно ради на једном пројекту користећи истовремено на десетине грана.

[[_integration_manager]]
==== Процес рада са руководиоцем интеграције

(((процеси рада, менаџер интеграције)))
Пошто вам програм Гит допушта да имате више удаљених репозиторијума, могуће је користити процес рада у коме сваки програмер има приступ уписа у сопствени јавни репозиторијуму и приступ читања свих осталих.
Овакав сценарио често укључује и канонички репозиторијум који представља „званичан” пројекат.
Ако желите да дате допринос таквом пројекту, треба да направите сопствени јавни клон пројекта и на њега гурате измене.
Онда можете да пошаљете захтев одржаваоцу главног пројекта да повуче ваше измене.
Одржавалац онда може да дода ваш репозиторијум као удаљени репозиторијум, локално тестира ваше промене, споји их у сопствену грану, па онда гурне назад на свој репозиторијум.
Овај процес ради на следећи начин (погледајте <<wfdiag_b>>):

1. Одржавалац пројекта гурне промене на свој јавни репозиторијум.
2. Особа која даје допринос клонира тај репозиторијум и прави промене.
3. Особа која даје допринос гура промене на своју личну јавну копију.
4. Особа која даје допринос шаље одржаваоцу имејл са молбом да повуче промене.
5. Одржавалац додаје репозиторијум особе која даје допринос као удаљени репозиторијум и спаја локално.
6. Одржавалац гура спојене промене на главни репозиторијум.

[[wfdiag_b]]
.Процес рада са руководиоцем интеграције
image::images/integration-manager.png[Процес рада са руководиоцем интеграције]

(((рачвање)))да
Ово је веома чест процес рада са алатима који су базирани на хабовима као што је GitHub или GitLab, када је лако рачвати пројекат и гурнути промене у своју рачву које ће сви видети.
Једна од главних предности овог приступа је то што можете да наставите са својим радом, а одржавалац главног репозиторијума може да повуче ваше промене у било ком тренутку.
Особе које дају допринос не морају чекати да пројекат прихвати њихове промене -- свако може да ради својим темпом.

==== Процес рада са диктатором и поручницима

(((процеси рада, диктатор и поручници)))
Ово је варијанта процеса рада са више репозиторијума.
У општем случају га користе огромни пројекти са стотинама сарадника; један познати пример је Линукс кернел.
Више руководиоца интеграције су задужени за одређене делове репозиторијума; они се називају _поручници_.
Сви поручници имају једног руководиоца интеграцијом који се назива благонаклони диктатор.
Благонаклони диктатор повлачи са њихових репозиторијума у референтни репозиторијум из ког сви сарадници морају да повлаче.
Овај процес ради на следећи начин (погледајте <<wfdiag_c>>):

1. Обични програмери раде на својим тематских гранама и ребазирају свој рад на врх `master` гране.
   `master` грана је у референтном репозиторијуму у који гура диктатор.
2. Поручници спајају тематске гране програмера у своју `master` грану.
3. Диктатор спаја `мастер` гране поручника у диктаторову `master` грану.
4. Напокон, диктатор гура своју `master` грану на референтни репозиторијум тако да остали програмери могу да га ребазирају.

[[wfdiag_c]]
.Процес рада са благонаклоним диктатором
image::images/benevolent-dictator.png[Процес рада са благонаклоним диктатором]

Овакав процес рада није уобичајен, али може да буде користан код великих пројеката, или у окружењима у којима је хијерархија јако изражена.
Дозвољава да вођа пројекта (диктатор) делегира велики део посла и сакупља велике подскупове кода са више места пре него што их интегрише.

==== Резиме процеса рада

То су били неки често коришћени процеси рада које је могуће користити у дистрибуираном систему као што је Гит, али јасно је да постоје многе варијације које одговарају вашем одређеном процесу рада у пракси.
Сада када (надамо се) можете да одлучите која комбинација процеса рада вам одговара, приказаћемо неке специфичније примере начина на које можете да постигнете главне улоге које чине различите процесе рада.
У следећем одељку ћете сазнати нешто о неколико честих образаца по којима се доприноси пројекту.
