=== Pack фајлови

Ако сте пратили сва упутства у примеру из претходног одељка, требало би да имате тест Гит репозиторијум са 11 објеката -- 4 блоба, 3 стабла, 3 комита и 1 ознаку:

[source,console]
----
$ find .git/objects -type f
.git/objects/01/55eb4229851634a0f03eb265b69f5a2d56f341 # tree 2
.git/objects/1a/410efbd13591db07496601ebc7a059dd55cfe9 # commit 3
.git/objects/1f/7a7a472abf3dd9643fd615f6da379c4acb3e3a # test.txt v2
.git/objects/3c/4e9cd789d88d8d89c1073707c3585e41b0e614 # tree 3
.git/objects/83/baae61804e65cc73a7201a7252750c76066a30 # test.txt v1
.git/objects/95/85191f37f7b0fb9444f35a9bf50de191beadc2 # tag
.git/objects/ca/c0cab538b970a37ea1e769cbbde608743bc96d # commit 2
.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4 # 'test content'
.git/objects/d8/329fc1cc938780ffdd9f94e0d364e0ea74f579 # tree 1
.git/objects/fa/49b077972391ad58037050f2a75f74e3671e92 # new.txt
.git/objects/fd/f4fc3344e67ab068f836878b6c4951e3b15f3d # commit 1
----

Програм Гит компресује садржаје ових фајлова користећи _zlib,_ а ви не чувате много тога, тако да сви заједно заузимају само 925 бајтова.
Додаћете мало већи садржај како бисмо демонстрирали једну занимљиву ствар у вези програма Гит.
Примера ради, додаћемо `repo.rb` фајл из _Grit_ библиотеке -- то је око 22К изворног кода.

[source,console]
----
$ curl https://raw.githubusercontent.com/mojombo/grit/master/lib/grit/repo.rb > repo.rb
$ git add repo.rb
$ git commit -m 'Create repo.rb'
[master 484a592] Create repo.rb
 3 files changed, 709 insertions(+), 2 deletions(-)
 delete mode 100644 bak/test.txt
 create mode 100644 repo.rb
 rewrite test.txt (100%)
----

Ако погледате стабло настало као резултат, видећете SHA-1 вредност израчунату за ваш нови `repo.rb` блоб објекат:

[source,console]
----
$ git cat-file -p master^{tree}
100644 blob fa49b077972391ad58037050f2a75f74e3671e92      new.txt
100644 blob 033b4468fa6b2a9547a70d88d1bbe8bf3f9ed0d5      repo.rb
100644 blob e3f094f522629ae358806b17daf78246c27c007b      test.txt
----

Затим можете употребити `git cat-file` да видите колика је величина тог објекта:

[source,console]
----
$ git cat-file -s 033b4468fa6b2a9547a70d88d1bbe8bf3f9ed0d5
22044
----

Сада мало измените тај фајл и погледајте шта ће се десити:

[source,console]
----
$ echo '# testing' >> repo.rb
$ git commit -am 'Modify repo.rb a bit'
[master 2431da6] Modify repo.rb a bit
 1 file changed, 1 insertion(+)
----

Проверите стабло које је креирано последњим комитом и видећете нешто занимљиво:

[source,console]
----
$ git cat-file -p master^{tree}
100644 blob fa49b077972391ad58037050f2a75f74e3671e92      new.txt
100644 blob b042a60ef7dff760008df33cee372b945b6e884e      repo.rb
100644 blob e3f094f522629ae358806b17daf78246c27c007b      test.txt
----

Тај блоб је сада потпуно другачији блоб, што значи да, иако сте додали само једну линију на фајла од 400 линија, програм Гит је тај нови садржај сачувао као потпуно нови објекат:

[source,console]
----
$ git cat-file -s b042a60ef7dff760008df33cee372b945b6e884e
22054
----

На диску имате два скоро идентична објекта од 22К (и сваки је компресован на отприлике 7К).
Зар не би било лепо кад би програм Гит могао да сачува један од њих у потпуности, а да уместо другог сачува само разлику у односу на први?

Испоставља се да програм Гит заправо то и ради.
Иницијални формат у ком програм Гит чува податке на диску назива се „слободни” формат објекта.
Ипак, да би сачувао простор и како би био што ефикаснији, програм Гит понекад спакује неколико таквих објеката у један бинарни фајл који се назива „pack фајл”.
Програм Гит ово ради ако имате превише слободних објеката наоколо, ако ручно извршите `git gc`, или ако гурнете на удаљени сервер.
Да бисте видели ово на делу, можете ручно да наредите програму Гит да спакује објекте тако што извршите команду `git gc`:

[source,console]
----
$ git gc
Counting objects: 18, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (14/14), done.
Writing objects: 100% (18/18), done.
Total 18 (delta 3), reused 0 (delta 0)
----

Ако погледате у директоријум `objects`, видећете да је већина објеката нестала и да се појавио нови пар фајлова:

[source,console]
----
$ find .git/objects -type f
.git/objects/bd/9dbf5aae1a3862dd1526723246b20206e5fc37
.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4
.git/objects/info/packs
.git/objects/pack/pack-978e03944f5c581011e6998cd0e9e30000905586.idx
.git/objects/pack/pack-978e03944f5c581011e6998cd0e9e30000905586.pack
----

Објекти који су остали су блобови на које не показује ниједан комит -- у овом случају, пример блобови „what is up, doc?” и „test content” које сте креирали раније.
Пошто их никад нисте додали у комитове, третирају се као слободне промене и не пакују се у _pack_ фајл.

Остали фајлови су нови _pack_ фајл и индекс.
_pack_ фајл је један фајл у којем се налази садржај свих објеката који су уклоњени из вашег фајл система.
Индекс је фајл у којем се налазе помераји унутар тог _pack_ фајла помоћу којих брзо можете да се поставите на одређени објекат.
Одлична ствар је то што иако су објекти на диску пре извршавања команде `gc` укупно заузимали око 15К, нови _pack_ фајл заузима само 7К.
Смањили сте заузеће диска за око пола тиме што сте спаковали објекте.

Како програм Гит ради ово?
Када програм Гит пакује објекте, он тражи фајлове које имају слично име и сличну величину, па чува само разлике између једне верзије фајла и наредне.
Водоводна команда `git verify-pack` вам омогућава да видите шта је спаковано:

[source,console]
----
$ git verify-pack -v .git/objects/pack/pack-978e03944f5c581011e6998cd0e9e30000905586.idx
2431da676938450a4d72e260db3bf7b0f587bbc1 commit 223 155 12
69bcdaff5328278ab1c0812ce0e07fa7d26a96d7 commit 214 152 167
80d02664cb23ed55b226516648c7ad5d0a3deb90 commit 214 145 319
43168a18b7613d1281e5560855a83eb8fde3d687 commit 213 146 464
092917823486a802e94d727c820a9024e14a1fc2 commit 214 146 610
702470739ce72005e2edff522fde85d52a65df9b commit 165 118 756
d368d0ac0678cbe6cce505be58126d3526706e54 tag    130 122 874
fe879577cb8cffcdf25441725141e310dd7d239b tree   136 136 996
d8329fc1cc938780ffdd9f94e0d364e0ea74f579 tree   36 46 1132
deef2e1b793907545e50a2ea2ddb5ba6c58c4506 tree   136 136 1178
d982c7cb2c2a972ee391a85da481fc1f9127a01d tree   6 17 1314 1 \
  deef2e1b793907545e50a2ea2ddb5ba6c58c4506
3c4e9cd789d88d8d89c1073707c3585e41b0e614 tree   8 19 1331 1 \
  deef2e1b793907545e50a2ea2ddb5ba6c58c4506
0155eb4229851634a0f03eb265b69f5a2d56f341 tree   71 76 1350
83baae61804e65cc73a7201a7252750c76066a30 blob   10 19 1426
fa49b077972391ad58037050f2a75f74e3671e92 blob   9 18 1445
b042a60ef7dff760008df33cee372b945b6e884e blob   22054 5799 1463
033b4468fa6b2a9547a70d88d1bbe8bf3f9ed0d5 blob   9 20 7262 1 \
  b042a60ef7dff760008df33cee372b945b6e884e
1f7a7a472abf3dd9643fd615f6da379c4acb3e3a blob   10 19 7282
non delta: 15 objects
chain length = 1: 3 objects
.git/objects/pack/pack-978e03944f5c581011e6998cd0e9e30000905586.pack: ok
----

Овде блоб `033b4`, што је ако се сећате била прва верзија вашег `repo.rb` фајла, указује на блоб `b042a`, који је друга верзије тог фајла.  Трећа колона у излазу је величина објекта у пакету, тако да можете видети да `b042a` заузима 22К фајла, али да `033b4` заузима само 9 бајтова.
Оно што је такође занимљиво је то што је друга верзија фајла она која је сачувана у целости, а првобитна верзија је сачувана као разлика -- подаци се чувају овако јер је вероватније да ће вам бити потребан брз приступ скорашњој верзији фајла.

Заиста одлична ствар у вези овога је што је препакивање могуће у било које време.
Програм Гит ће повремено потпуно аутоматски да препакује вашу базу података, чиме увек покушава да уштеди још простора, али и ви ручно можете да је препакујете кадгод пожелите тако што ћете извршити команду `git gc`.
