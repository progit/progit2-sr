[[_undoing]]
=== Опозив

У било ком тренутку можете пожелети да нешто опозовете (_undo_).
Овде ћемо бацити поглед на неколико основних алата за опозив радњи.
Будите опрезни, јер не можете увек да опозовете неке од ових опозива.
Ово је једна од ретких области програма Гит где можете изгубити неки део вашег рада у случају ако поступите на погрешан начин.

Чест случај када је потребан опозив се јавља онда када комитујете прерано и можда заборавите да додате неке фајлове, или погрешно напишете своју комит поруку.
Ако желите да поново урадите тај комит, направите додатне измене које сте заборавили, стејџујте их и поново комитујте опцијом `--amend`:

[source,console]
----
$ git commit --amend
----

Ова команда узима ваш стејџ и користи га за комит.
Ако од последњег комита нисте направили никакве измене (на пример, покренете ову команду одмах након последњег комита), онда ће снимак изгледати потпуно исто и све што ћете променити је комит порука.

Појављује се исти едитор за комит поруку, али се у њему већ налази укуцана порука из претходног комита.
Поруку можете уредити као и увек, али тиме преписујете претходни комит.

Као пример, ако комитујете и онда схватите да сте заборавили да стејџујете промене у фајлу који сте желели да додате у овај комит, можете да урадите нешто овако:

[source,console]
----
$ git commit -m 'Initial commit'
$ git add zaboravljeni-fajl
$ git commit --amend
----

На крају остаје само један комит -- други комит замењује резултате првог.

[NOTE]
====
Важно је да разумете да када преправљате свој последњи комит, ви га уствари не поправљате већ га комплетно _замењујете_ потпуно новим, побољшаним комитом који склања стари с пута и на његово места поставља нови комит.
У суштини, исто је као да се претходни комит није ни догодио, па се неће ни приказивати у историји вашег репозиторијума.

Очигледна вредност преправљања комитова је у томе што мала побољшања свог последњег комита можете да урадите без затрпавања историје вашег репозиторијума порукама као што су „`Уупс, заборавио сам да додам фајл`” или „`Аххх, исправка грешке у куцању у последњем комиту`”.
====

[NOTE]
====
Преправљајте само комите који су још увек у локалу и нису гурнути негде.
Преправљање комита који су раније гурнути и форсирано гурање гране ће правити проблеме вашим сарадницима.
За више детаља о томе шта се дешава ако ово урадите, као и начин за опоравак ако се налазите на пријемном крају, прочитајте <<_rebase_peril>>.
====

[[_unstaging]]
==== Уклањање фајла са стејџа

Следећа два одељка показују како да радите са променама на стејџу и радном директоријуму.
Добро је то што вас команда коју користите да би одредили стање ове две области такође подсећа и на начин за опозив промена које над њима направите.
На пример, рецимо да сте променили два фајла и да желите да их комитујете као две посебне измене, али сте случајно укуцали `git add *` и тако их оба додали на стејџ.
Kako da jedan od njih sklonite sa stejdža?
Команда `git status` вас подсећа на то:

[source,console]
----
$ git add *
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README
    modified:   CONTRIBUTING.md
----

Одмах испод текста „`Changes to be committed`” пише да треба да употребите `git reset HEAD <file>...` ако фајл желите да уклоните са стејџа.
Тај савет ћемо искористити да фајл `CONTRIBUTING.md` уклонимо са стејџа:

[source,console]
----
$ git reset HEAD CONTRIBUTING.md
Unstaged changes after reset:
M	CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

Ова команда је помало чудна, али обавља посао.
Фајл `CONTRIBUTING.md` је измењен али поново није на стејџу.

[NOTE]
=====
Mada `git reset` _može_ da bude opasan ako ga pozovete sa `--hard`, u ovom slučaju se fajl u radnom direktorijumu ne dira.
Zvanje `git reset` bez ikakve opcije nikad nije opasno -- radi samo nad stejdžom.
=====

Zasad je ova čarobna reč sve što je potrebno da znate o `git reset` komandi.
Mnogo detaljnije ćemo ispitati šta tačno radi `reset` u <<_git_reset>> kada ćemo i pogledati kako da je iskoristimo da bismo uradili neke veoma zanimljive stvari.

==== Razmodifikovanje modifikovanog fajla

Šta ako shvatite da ne želite da zadržite izmene u fajlu `CONTRIBUTING.md`?
Kako da ga jednostavno razmodifikujete -- da ga vratite na stanje u kakvom je bio kada ste poslednji put načinili komit (ili inicijalno klonirali, ili kako god ga dovukli u radni direktorijum)?
Srećom, `git status` vam govori kako i to da uradite.
U prošlom primeru izlaza, fajlovi koji nisu bili na stejdžu bili su predstavljeni ovako:

[source,console]
----
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

Kaže vam kako eksplicitno da odbacite promene koje ste napravili.
Hajde da uradimo šta nam savetuje.

[source,console]
----
$ git checkout -- CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README

----

Možete da proverite da su se promene vratile na staro.

[IMPORTANT]
=====
Važno je da razumete da je `git checkout -- [fajl]` opasna komanda.
Svaka promena koju ste napravili u tom fajlu je nestala -- Git je upravo prekopirao drugi fajl preko njega.
Nikada nemojte da koristite ovu komandu osim ako niste stoprocentno sigurni da vam promene koje ste napravili više ne trebaju.
=====

Ako biste želeli da zadržite promene koje ste napravili u fajlu ali i ipak želite da se trenutno vratite na staro, saznaćete kako da uradite to pomoću skrivanja (_stash_) i grananja (_branching_) u <<_git_branching>>; to su obično bolji načini za rad.

Upamtite, sve što je _komitovano_ u Gitu se skoro uvek može povratiti.
Čak i komitovi koji su bili na granama koje su obrisane ili komitovi koji su prepisani koristeći `--amend` komit mogu da se povrate (vidite <<_data_recovery>> za obnovu podataka).
Ipak, sve što izgubite a nikad nije bilo komitovano verovatno više nikad nećete videti.
