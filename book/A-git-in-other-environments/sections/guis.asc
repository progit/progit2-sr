=== Графички интерфејси

(((ГКИ)))(((Графички алати)))
Природно окружење програма Гит је терминал.
Ту се најпре појаве нове могућности, а и пуну снагу програма Гит имате на располагању само из командне линије.
Али чисти текст није најбољи избор за све задатке; понекад је оно што вам треба визуелна представа, а и неки корисници се много комфорније осећају у покажи-и-кликни интерфејсу.

Важно је приметити да су различити интерфејси прилагођени различитим радним процесима.
Неки клијенти излажу само пажљиво одабрани подскуп функционалности програма Гит, како би подржали специфични начин рада који аутор сматра ефикасним.
Када се посматра из овог угла, ниједан од ових алата не може да се назове „бољим” од било ког другог, они су једноставно погоднији за примену којој су намењени.
Исто тако, приметите да не постоји ништа што ови графички клијенти могу да ураде, а да не може клијент из командне линије; командна линија је још увек место на којем имате највише снаге и контроле када радите са својим репозиторијумима.

==== `gitk` и `git-gui`

(((гит команде, gitk)))(((гит команде, gui)))(((gitk)))
Када инсталирате програм Гит, такође добијате и визуелне алате, `gitk` и `git-gui`.

`gitk` вам даје графички приказ историје.
Посматрајте га као моћну ГКИ љуску преко `git log` и `git grep` команди.
Ово је алат који треба користити када покушавате да пронађете нешто што се догодило у прошлости, или да визуелизујете историју свог пројекта.

_Gitk_ се најлакше позива из командне линије.
Једноставно урадите `cd` у Гит репозиторијум и откуцајте:

[source,console]
----
$ gitk [git log опције]
----

_Gitk_ прихвата многе опције командне линије, од којих већину прослеђује позадинској `git log` акцији.
Вероватно једна од најкориснијих заставица је `--all`, која програму _gitk_ налаже да прикаже комитове који су доступни из _било које_ референце, не само из HEAD.
Интерфејс програма _gitk_ изгледа овако:

.`gitk` приказивач историје
image::images/gitk.png[`gitk` приказивач историје]

На врху се налази нешто што личи на излаз команде `git log --graph`; свака тачка представља комит, линије представљају родитељске везе, а референце су представљене обојеним правоугаоницима.
Жута тачка представља HEAD, а црвена тачка представља измене које још увек нису постале комит.
У дну се налази поглед изабраног комита; коментари и закрпа на левој страни, а прегледни поглед са десне стране.
Између се налази скуп контрола које се користе за претрагу историје.

С друге стране, `git-gui` је првенствено, алат за изградњу комитова.
И он се такође најједноставније покреће из командне линије:

[source,console]
-----
$ git gui
-----

И изгледа овако некако:

.`git-gui` алат за комитовање
image::images/git-gui.png[`git-gui` алат за комитовање]

На левој страни је индекс; измене које нису на стејџу се налазе на врху, измене на стејџу су на дну.
Комплетне фајлове можете да премештате из стања у стање тако што кликнете на њихове иконе, или можете да изаберете фајл који желите да погледате кликом на његово име.

Горе десно се налази поглед разлике који приказује разлике за тренутно изабрани фајл.
Поједине комаде (или поједине линије) можете да ставите на стејџ тако што урадите десни клик у овој области.

Доле десно је област за поруку и акције.
Када желите да урадите нешто слично са `git commit`, откуцајте своју поруку у текст поље и кликните „Commit”.
Можете изабрати да преправите последњи комит тако што кликнете на  „Amend” радио дугме, па ће то да ажурира „Staged Changes” област са садржајем последњег комита.
Затим једноставно можете да неке измене ставите на стејџ или да их уклоните са њега, измените комит поруку, па поново кликнете на „Commit” да замените стари комит са новим.

`gitk` и `git-gui` су примери алата који су оријентисани на задатак.
Сваки је прилагођен специфичној намени (прегледу историје и креирању комитова, респективно), и изостављају могућности које нису неопходне за тај задатак изостављају могућности које нису неопходне за тај задатак.


==== GitHub за мекОС и Виндоуз

(((GitHub за мекОС)))(((GitHub за Виндоуз)))
_GitHub_ је креирао два Гит клијента оријентисана на процес рада: један за Виндоуз и један за мекОС.
Ови клијенти су добар пример алата оријентисаних на процес рада – уместо да изложе _комплетну_ функционалност Гит програма, они се фокусирају на одабрани скуп могућности које се уобичајено користе у добро функционишу заједно.
They look like this:

.GitHub за мекОС
image::images/github_mac.png[GitHub за мекОС]

.GitHub за Виндоуз
image::images/github_win.png[GitHub за Виндоуз]

Дизајнирани су тако да изгледају и раде врло слично, тако да ћемо их у овом поглављу третирати као да су један производ.
Нећемо проћи кроз детаљно извршавање ових алата (они имају сопствену документацију), али следи брзо представљање „changes” погледа (што је место на којем проводите највећи део свог времена).

* Са леве стране је листа репозиторијума које клијент прати; репозиторијум можете додати (било клонирањем, било локалним прикачивањем) тако што кликнете на икону „+” у врху ове области.
* У средини се налази област за унос комита која вам омогућава да унесете комит поруку и да изаберете фајлове који ће ући у комит.
  На Виндоуз систему се комит историја проказује непосредно испод овога; на мекОС, она се налази у одвојеној картици.
* Са десне стране је погледа разлике који приказује шта се изменило у радном директоријуму, или које су измене у изабраном комиту.
* Последња ствар коју треба приметите је дугме „Sync” у горњем десном углу које представља основни начин за интеракцију преко мреже.

[NOTE]
====
Да бисте користили ове алате, није потребно да поседујете _GitHub_ налог.
Мада су дизајнирани да истакну _GitHub_ сервис и препоручени процес рада, фино ће радити са било којим репозиторијумом и обављаће мрежне операције са било којим Гит хостом.
====

===== Инсталација

_GitHub_ за Виндоуз може да се преузме са адресе https://windows.github.com[], а _GitHub_ за мекОС са https://mac.github.com[].
Када се апликације покрену по први пут, оне вас воде кроз комплетно подешавање програма Гит, као што је конфигурисање вашег имена и имејл адресе и оба постављају разумне подразумеване вредности за већину конфигурационих опција, као што су кешеви акредитива и CRLF понашање.

Ова програма су „evergreen” – ажурирања се преузимају и инсталирају у позадини док се апликације извршавају.
Ово згодно укључује и верзију програма Гит који се испоручује уз апликације, а то значи на више нећете морати да водите рачуна о ручном ажурирању.
На Виндоуз систему, клијент има и пречицу за покретање _Powershell_ са _Posh-git,_ о којем ћемо говорити касније у овом поглављу.

Следећи корак је да алатима доставите неколико репозиторијума са којима ће да раде.
Клијент вам приказује листу репозиторијума за које имате приступ на сервису _GitHub_ и може да их клонира у једном кораку.
Ако већ имате локални репозиторијум, једноставно превуците његов директоријум из _Finder_ или _Windows Explorer_ прозора у прозор _GitHub_ клијента и он ће постати део листе репозиторијума са леве стране.

===== Препоручени процес рада

Једном када се инсталира и подеси, __GitHub__ клијент можете користити за многе уобичајене Гит послове.
Предвиђени процес рада се понекада назива __GitHub процес__.
Ово представљамо са више детаља у <<ch06-github#ch06-github_flow>>, али општи __gist__ је да ћете (а) комитовати у грану, и (б) прилично редовно ћете се синхронизовати са удаљеним репозиторијумом.

Управљање гранама је једна од ствари у којој се ова два алата разилазе.
За креирање нове гране на мекОС постоји дугме на врху прозора:

.„Create Branch” дугме на мекОС
image::images/branch_widget_mac.png[„Create Branch” дугме на мекОС]

На Виндоуз систему, ово се ради уношењем имена нове гране у виџет за прелаз на другу грану:

.Креирање гране на Виндоуз систему
image::images/branch_widget_win.png[Креирање гране на Виндоуз систему]

Када направите грану, креирање нових комитова је просто.
Направите мало измена у радном директоријуму, па када пређете у прозор _GitHub_ клијента, он ће вам приказати измењене фајлове.
Унесите комит поруку, изаберите фајлове које желите да укључите у комит и кликните на на „Commit” button (ctrl-ентер или ⌘-ентер).

Главни начин путем којег имате интеракцију преко мреже са осталим репозиторијумима је употребом „Sync” могућности.
Програм Гит интерно има одвојене операције за гурање преузимање, спајање и ребазирање, али _GitHub_ клијенти их све стапају у једну могућност у више корака.
Ево шта се дешава када кликнете на _Sync_ дугме:

. `git pull --rebase`.
  Ако ово не успе због конфликта при спајању, прибегава на  `git pull --no-rebase`.
. `git push`.

Ово је најуобичајенији низ мрежних команди када се ради у овом стилу, тако да њихово сабијање у једну команду штеди доста времена.

===== Резиме

Ови алату су веома погодни за процес рада којем су намењени.
Програмери и они који то нису, очас посла могу кренути да сарађују на пројекту.
Међутим, ако се ваш процес рада разликује, или ако желите више контроле над тиме како и када се врше мрежне операције, препоручујемо вам да користите неки други клијент или командну линију.


==== Остали ГКИ

Постоји већи број других графичких Гит клијената који су део гаме од специјализованих алата за једну намену, па све до апликација које покушавају да изложе све што програм Гит може.
Званични Гит веб сајт има одржавану листу најпопуларнијих клијената на адреси http://git-scm.com/downloads/guis[].
Свеобухватнија листа постоји на Фит вики сајту, на адреси https://git.wiki.kernel.org/index.php/Interfaces,_frontends,_and_tools#Graphical_Interfaces[].
